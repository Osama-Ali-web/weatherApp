{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN STACK\\\\weather\\\\src\\\\components\\\\Hourly.jsx\";\nimport React, { useContext } from \"react\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport { Navigation } from \"swiper\";\nimport \"swiper/css\";\nimport \"swiper/css/navigation\";\nimport AppContext from \"../provider/appContext\";\nimport Temperature from \"./Temperature\";\nimport Card from \"./Card\";\nimport Loader from \"./Loader\";\nfunction Hourly() {\n  const {\n    app: {\n      weather\n    }\n  } = useContext(AppContext);\n  if (!weather) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 12\n      }\n    });\n  }\n  const {\n    hourly\n  } = weather;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Swiper, {\n    spaceBetween: 20,\n    navigation: true,\n    modules: [Navigation],\n    breakpoints: {\n      0: {\n        slidesPerView: 2\n      },\n      700: {\n        slidesPerView: 3\n      },\n      1200: {\n        slidesPerView: 4\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, hourly.map((hWeather, index) => {\n    const date = new Date(hWeather.dt * 1000);\n    const formatter = Intl.DateTimeFormat([], {\n      hour12: true,\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      timeZone: weather.timezone\n    });\n    const dayFormatter = Intl.DateTimeFormat([], {\n      weekday: \"long\",\n      timeZone: weather.timezone\n    });\n    return /*#__PURE__*/React.createElement(SwiperSlide, {\n      key: index + Math.random().toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      key: index,\n      className: \"forecast-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forecast-day\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, dayFormatter.format(date), \",\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }\n    }, formatter.format(date))), /*#__PURE__*/React.createElement(\"img\", {\n      src: `/weather_icons/${hWeather.weather[0].icon}.png`,\n      alt: \"\",\n      width: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forecast-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, hWeather.weather[0].description), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"minmax-temp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Temperature, {\n      temperature: hWeather.temp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 19\n      }\n    }), \"\\xB0\")));\n  })));\n}\nexport default Hourly;","map":{"version":3,"names":["React","useContext","Swiper","SwiperSlide","Navigation","AppContext","Temperature","Card","Loader","Hourly","app","weather","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","hourly","spaceBetween","navigation","modules","breakpoints","slidesPerView","map","hWeather","index","date","Date","dt","formatter","Intl","DateTimeFormat","hour12","hour","minute","timeZone","timezone","dayFormatter","weekday","key","Math","random","toString","className","format","src","icon","alt","width","description","temperature","temp"],"sources":["D:/MERN STACK/weather/src/components/Hourly.jsx"],"sourcesContent":["import React, { useContext } from \"react\";\n\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport { Navigation } from \"swiper\";\n\nimport \"swiper/css\";\nimport \"swiper/css/navigation\";\n\nimport AppContext from \"../provider/appContext\";\nimport Temperature from \"./Temperature\";\nimport Card from \"./Card\";\nimport Loader from \"./Loader\";\n\nfunction Hourly() {\n  const {\n    app: { weather },\n  } = useContext(AppContext);\n  if (!weather) {\n    return <Loader />;\n  }\n  const { hourly } = weather;\n  return (\n    <div>\n      <Swiper\n        spaceBetween={20}\n        navigation={true}\n        modules={[Navigation]}\n        breakpoints={{\n          0: {\n            slidesPerView: 2,\n          },\n          700: {\n            slidesPerView: 3,\n          },\n          1200: {\n            slidesPerView: 4,\n          },\n        }}\n      >\n        {hourly.map((hWeather, index) => {\n          const date = new Date(hWeather.dt * 1000);\n          const formatter = Intl.DateTimeFormat([], {\n            hour12: true,\n            hour: \"numeric\",\n            minute: \"2-digit\",\n            timeZone: weather.timezone,\n          });\n          const dayFormatter = Intl.DateTimeFormat([], {\n            weekday: \"long\",\n            timeZone: weather.timezone,\n          });\n          return (\n            <SwiperSlide key={index + Math.random().toString()}>\n              <Card key={index} className=\"forecast-card\">\n                <div className=\"forecast-day\">\n                  {dayFormatter.format(date)},{\" \"}\n                  <span>{formatter.format(date)}</span>\n                </div>\n                <img\n                  src={`/weather_icons/${hWeather.weather[0].icon}.png`}\n                  alt=\"\"\n                  width={100}\n                />\n                <div className=\"forecast-description\">\n                  {hWeather.weather[0].description}\n                </div>\n                <div className=\"minmax-temp\">\n                  <Temperature temperature={hWeather.temp} />Â°\n                </div>\n              </Card>\n            </SwiperSlide>\n          );\n        })}\n      </Swiper>\n    </div>\n  );\n}\n\nexport default Hourly;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}